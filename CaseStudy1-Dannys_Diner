/* --------------------
   Case Study Questions
   --------------------*/ 
 -- 1. What is the total amount each customer spent at the restaurant?
 -- pull out the cost of (each_item)*(ordered_times) by customer_id

SELECT s.customer_id,
       s.product_id,
       count(s.product_id) AS each_count,
       count(s.product_id)*
  (SELECT m.price
   FROM dannys_diner.menu m
   WHERE s.product_id = m.product_id) AS each_item_sum INTO sum_each_item
FROM dannys_diner.sales s
GROUP BY s.customer_id,
         s.product_id;

--sum those up by each customer

SELECT customer_id AS customer,
       sum(each_item_sum) AS total_spent
FROM sum_each_item
GROUP BY customer_id
ORDER BY customer_id 

-- 2. How many days has each customer visited the restaurant?
-- how many day a customer has ordered from the restaurant? remove duplicated reords as same date but multiple orders.

SELECT s.customer_id AS customer,
       count(DISTINCT s.order_date)
FROM dannys_diner.sales s
GROUP BY 1 
-- 3. What was the first item from the menu purchased by each customer?
 -- find 1st ordered date of each customer

SELECT s.customer_id,
       min(s.order_date) AS first_order_date INTO first_date_ordered
FROM dannys_diner.sales s
GROUP BY s.customer_id
ORDER BY s.customer_id;

--find out which items ordered by that customer on that date

SELECT f.customer_id,
       f.first_order_date,
       s.product_id,
       m.product_name,
       m.price
FROM first_date_ordered f
JOIN dannys_diner.sales s ON f.customer_id = s.customer_id
AND f.first_order_date = s.order_date
JOIN dannys_diner.menu m ON s.product_id = m.product_id
ORDER BY f.customer_id 
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
 -- which product_id sold most?

SELECT s.product_id,
       count(s.order_date) INTO sold_most
FROM dannys_diner.sales s
GROUP BY s.product_id
ORDER BY 2 DESC
LIMIT 1;

-- what is the product info from menu

SELECT m.*
FROM dannys_diner.menu m
JOIN sold_most s ON m.product_id = s.product_id 
-- 5. Which item was the most popular for each customer?
 --count each item by each customer

SELECT s.customer_id,
       s.product_id,
       count(order_date) AS count_each INTO count_each_item
FROM dannys_diner.sales s
GROUP BY s.customer_id,
         s.product_id
ORDER BY 3 DESC;

--pick item that has count is the max for each customer

SELECT c.customer_id,
       c.product_id,
       c.count_each AS order_times,
       me.product_name
FROM count_each_item c
JOIN
  (SELECT cc.customer_id,
          max(cc.count_each) AS max_count
   FROM count_each_item cc
   GROUP BY cc.customer_id) sub ON c.customer_id = sub.customer_id
JOIN dannys_diner.menu me ON c.product_id = me.product_id
WHERE c.count_each = sub.max_count
ORDER BY c.customer_id 
-- 6. Which item was purchased first by the customer after they became a member?
 -- find 1st ordered date after become member

SELECT s.customer_id,
       min(s.order_date) AS first_order_date INTO first_date_ordered
FROM dannys_diner.sales s
JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
WHERE s.order_date >= mem.join_date
GROUP BY s.customer_id
ORDER BY s.customer_id;

--find out which items ordered by that customer on that date

SELECT f.customer_id,
       f.first_order_date,
       s.product_id,
       m.product_name,
       m.price
FROM first_date_ordered f
JOIN dannys_diner.sales s ON f.customer_id = s.customer_id
AND f.first_order_date = s.order_date
JOIN dannys_diner.menu m ON s.product_id = m.product_id
ORDER BY f.customer_id 
-- 7. Which item was purchased just before the customer became a member?
 -- find 1st ordered date before become member

SELECT s.customer_id,
       max(s.order_date) AS first_order_date INTO first_date_ordered_before_mem
FROM dannys_diner.sales s
JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
WHERE s.order_date < mem.join_date
GROUP BY s.customer_id
ORDER BY s.customer_id;

--find out which items ordered by that customer on that date

SELECT f.customer_id,
       f.first_order_date,
       s.product_id,
       m.product_name,
       m.price
FROM first_date_ordered_before_mem f
JOIN dannys_diner.sales s ON f.customer_id = s.customer_id
AND f.first_order_date = s.order_date
JOIN dannys_diner.menu m ON s.product_id = m.product_id
ORDER BY f.customer_id 
-- 8. What is the total items and amount spent for each member before they became a member?
 -- get total items ordered by each member

SELECT s.customer_id,
       s.product_id,
       count(s.product_id) AS items_count INTO total_items
FROM dannys_diner.sales s
JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
AND s.order_date < mem.join_date
GROUP BY s.customer_id,
         s.product_id
ORDER BY s.customer_id;


SELECT t.customer_id,
       sum(t.items_count*mem.price) AS expense
FROM total_items t
JOIN dannys_diner.menu mem ON t.product_id = mem.product_id
GROUP BY t.customer_id
ORDER BY t.customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
 -- get total items per customer

SELECT s.customer_id,
       s.product_id,
       count(s.product_id) AS items_count INTO total_items
FROM dannys_diner.sales s
GROUP BY s.customer_id,
         s.product_id
ORDER BY s.customer_id;

-- calculate the sum of points

SELECT t.customer_id,
       SUM (CASE mem.product_name LIKE 'sushi'
                WHEN TRUE THEN t.items_count*mem.price*20
                ELSE t.items_count*mem.price*10
            END)
FROM total_items t
JOIN dannys_diner.menu mem ON t.product_id = mem.product_id
GROUP BY t.customer_id
ORDER BY t.customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
 -- get total items per customer before end of Jan

SELECT s.customer_id,
       s.product_id,
       s.order_date,
       count(s.product_id) AS items_count INTO total_items_beforeJan
FROM dannys_diner.sales s
JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
WHERE s.order_date < '2021-02-01'
GROUP BY s.customer_id,
         s.product_id,
         s.order_date
ORDER BY s.customer_id;

-- calculate the sum of points

SELECT t.customer_id,
       SUM (CASE t.order_date < (m.join_date +7)
                WHEN TRUE THEN t.items_count*mem.price*20
                ELSE t.items_count*mem.price*10
            END)
FROM total_items_beforeJan t
JOIN dannys_diner.menu mem ON t.product_id = mem.product_id
JOIN dannys_diner.members m ON t.customer_id = m.customer_id
GROUP BY t.customer_id
ORDER BY t.customer_id;
